export const createOrder = async (req, res) => {
  try {
    const { partyName, city, mobileNo, remarks, createdBy } = req.body;
    let items = req.body.items;

    const salesPersonId = req.userId;
    const salesPersonName = req.userName;

    console.log(req.body); // Debugging line

    // Ensure `items` is parsed properly before accessing it
    try {
      items = typeof items === "string" ? JSON.parse(items) : items;
    } catch (error) {
      return res.status(400).json({ message: "Invalid items format." });
    }

    // Validate parsed items
    if (!Array.isArray(items) || items.length === 0) {
      return res
        .status(400)
        .json({ message: "Items should be a non-empty array." });
    }

    const randomSixDigit = Math.floor(100000 + Math.random() * 900000);
    const orderNo = `ORD-${randomSixDigit}`;

    let serialNumber;
    const counter = await Counter.findOneAndUpdate(
      { name: "orderSerial" },
      { $inc: { value: 1 } },
      { new: true, upsert: true }
    );
    serialNumber = counter.value;

    const itemImage = req.file;
    let imageUrl = "";

    if (itemImage) {
      const bufferStream = new Readable();
      bufferStream.push(itemImage.buffer);
      bufferStream.push(null);

      imageUrl = await new Promise((resolve, reject) => {
        const uploadStream = cloudinary.v2.uploader.upload_stream(
          { folder: "orders" },
          (error, result) => {
            if (error) reject(error);
            else resolve(result.secure_url);
          }
        );
        bufferStream.pipe(uploadStream);
      });
    }

    // Process first item in items array (assuming only one item)
    const processedItem = items[0];
    const formattedItem = {
      itemName: processedItem.itemName,
      size: processedItem.size,
      quantity: processedItem.quantity,
      imageUrl,
      layers: processedItem.layers.map((layer) => ({
        layerNumber: layer.layerNumber,
        size: layer.size || null,
        quantity: layer.quantity || 0,
      })),
    };

    console.log("Formatted Item:", formattedItem); // Debugging line

    const newOrder = new Order({
      serialNumber,
      salesPerson: {
        id: salesPersonId,
        name: salesPersonName,
        remarks: remarks || null,
        createdBy: createdBy || null,
      },
      orderNo,
      partyName,
      city,
      mobileNo,
      item: formattedItem, // Ensure this matches your schema
    });

    await newOrder.save();
    res
      .status(201)
      .json({ message: "Order created successfully", order: newOrder });
  } catch (error) {
    console.error("Order Creation Error:", error);
    res
      .status(500)
      .json({ message: "Error while creating order.", error: error.message });
  }
};



import mongoose from "mongoose";
import moment from "moment-timezone";

// const itemSchema = new mongoose.Schema({
//   itemName: {
//     type: String,
//     required: true,
//   },

//   imageUrl: {
//     type: String, // Single string for the image URL
//     // required: true, // Image is required
//   },
//   size: {
//     type: String,
//     required: true,
//   },
//   quantity: {
//     type: String,
//     required: true,
//   },
// });
const itemSchema = new mongoose.Schema({
  itemName: {
    type: String,
    required: true,
  },
  imageUrl: {
    type: String,
  },
  size: {
    type: String,
  },
  quantity: {
    type: String,
  },
  layers: {
    type: [
      {
        layerNumber: { type: Number }, // Layer 1 to 5
        size: { type: String, required: false },
        quantity: { type: Number, required: false },
      },
    ],
  },
});

const orderSchema = new mongoose.Schema({
  salesPerson: {
    id: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: "SalesUser", // Reference to Sales User
    },
    name: {
      type: String,
      required: true,
    },
    remarks: {
      type: String,
      default: null, // Optional field for sales team remarks
    },
    createdBy: {
      type: String,
      default: null, // Optional field for sales team remarks
    },
    assignedDate: {
      type: String,
      default: () => moment().tz("Asia/Kolkata").format("YYYY-MM-DD"), // Date when assigned
    },
    assignedTime: {
      type: String,
      default: () => moment().tz("Asia/Kolkata").format("hh:mm A"), // Time when assigned
    },
  },
  productionTeam: {
    id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "ProductionUser", // Reference to Production User
      default: null, // Initially not assigned
    },
    name: {
      type: String,
      default: null, // Name will be set when assigned
    },
    remarks: {
      type: String,
      default: null, // Optional field for production team remarks
    },
    updatedBy: {
      type: String,
      default: null, // Optional field for production team remarks
    },

    status: {
      type: String,
      required: true,
      enum: ["Not Yet Started", "Started", "Done"],
      default: "Not Yet Started", // Default status
    },
    assignedDate: {
      type: String,
      default: null, // Initially not assigned
    },
    assignedTime: {
      type: String,
      default: null, // Initially not assigned
    },
    workDoneDate: {
      type: String,
      default: null, // Initially not assigned
    },
    workDoneTime: {
      type: String,
      default: null, // Initially not assigned
    },
  },
  deliveryTeam: {
    id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "DeliveryUser", // Reference to Delivery User
      default: null, // Initially not assigned
    },
    name: {
      type: String,
      default: null, // Name will be set when assigned
    },
    remarks: {
      type: String,
      default: null, // Optional field for delivery team remarks
    },
    assignedDate: {
      type: String,
      default: null, // Initially not assigned
    },
    assignedTime: {
      type: String,
      default: null, // Initially not assigned
    },
    status: {
      type: String,
      required: true,
      enum: ["Waiting", "Dispatched", "Arrived"],
      default: "Waiting", // Default status
    },
    updatedBy: {
      type: String,
      default: null, // Optional field for production team remarks
    },
    dispatchDate: {
      type: String,
      default: null, // Initially not assigned
    },
    dispatchTime: {
      type: String,
      default: null, // Initially not assigned
    },
    arrivedDate: {
      type: String,
      default: null, // Initially not assigned
    },
    arrivedTime: {
      type: String,
      default: null, // Initially not assigned
    },
  },
  serialNumber: {
    type: Number,
    unique: true, // Ensures uniqueness
  },
  orderNo: {
    type: String,
    required: true,
    unique: true,
  },
  orderDate: {
    type: String,
    required: true,
    default: () => moment().tz("Asia/Kolkata").format("YYYY-MM-DD"), // Default in IST
  },
  orderTime: {
    type: String,
    required: true,
    default: () => moment().tz("Asia/Kolkata").format("hh:mm A"), // Default in 12-hour IST
  },
  partyName: {
    type: String,
    required: true,
  },
  city: {
    type: String,
    required: true,
  },
  mobileNo: {
    type: String,
    required: true,
    match: /^[6-9]\d{9}$/, // Validate Indian mobile numbers
  },
  item: [itemSchema], // Changed from an array to a single item object
  status: {
    type: String,
    required: true,
    enum: ["Order Created", "Ready", "Dispatched"],
    default: "Order Created", // Default status
  },
});

// Pre-save middleware to ensure date and time are always formatted
orderSchema.pre("save", function (next) {
  const now = moment().tz("Asia/Kolkata");
  this.orderDate = now.format("YYYY-MM-DD"); // Set to IST date

  this.orderTime = now.format("hh:mm A"); // Set to IST time in 12-hour format
  next();
});

const Order = mongoose.model("Order", orderSchema);

export default Order;
